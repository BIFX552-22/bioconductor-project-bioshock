---
title: "Bioshock Doc"
format: html
authors:
- J. Jedediah Smith
- Gerard Duncan
- Ian Lacy
---

## 1.1 Introduction

**Epigenetics and Methylation**

-   Epigenetics: The study of how your behaviors and environment can cause changes that affect the way your genes work.

-   Methylation: Methyl group gets added to DNA, at Cytosine/Guanine bases. Associated with development and disease.

**Common Methylation Research**

-   Dr. Phillip Jurmeister: Machine learning algorithm to classify sinonasal tumors

-   Dr. Glen E Duncan: Physical activity and epigenetic markers

**Methylation Level Measurements**

-   Two measurements for each CpG: methylated intensity(M) and unmethylated intensity(U) for determining methylation proportions 

-   `GetBeta` function in `minfi` to get these values 

## 1.2 Loading the Workflow Package

The is the initial step we do to get the methlation array package installed. You can read more about this workflow on the bioconductor website.

-   <https://bioconductor.org/packages/release/workflows/html/methylationArrayAnalysis.html>

```{r}
#| eval: false
#| echo: false
#| message: false

if (!require("BiocManager", quietly = TRUE))
    install.packages("BiocManager")

BiocManager::install("methylationArrayAnalysis")
```

## 2.1 Obtain the Data

This is how we obtained the example data. It is part of the package so you do not need to install anything extra.

```{r}
# Set up a path to the data directory
dataDirectory <- system.file("extdata", package = "methylationArrayAnalysis")

# List the files
list.files(dataDirectory, recursive = TRUE)
```

## 2.2 Load the Data

This is where we load the example data and prepare it for our analysis.

-   Many methylation specific packages  

-   `Minfi` and `read.metharray.sheet`

```{r}
#| echo: false
#| message: false

# Load packages required for analysis
library(knitr)
library(limma)
library(minfi)
library(IlluminaHumanMethylation450kanno.ilmn12.hg19)
library(IlluminaHumanMethylation450kmanifest)
library(RColorBrewer)
library(missMethyl)
library(minfiData)
library(Gviz)
library(DMRcate)
library(stringr)
```

```{r}
# Get the 450k annotation data
ann450k <- getAnnotation(IlluminaHumanMethylation450kanno.ilmn12.hg19)
head(ann450k)
```

```{r}
# Read in the sample sheet for the experiment
targets <- read.metharray.sheet(dataDirectory, pattern="SampleSheet.csv")
targets
```

```{r}
# Read in the raw data from the IDAT files
rgSet <- read.metharray.exp(targets=targets)
rgSet
```

```{r}
# Give the samples descriptive names
targets$ID <- paste(targets$Sample_Group,targets$Sample_Name,sep=".")
sampleNames(rgSet) <- targets$ID
rgSet
```

## 2.3 Quality Control

This is where we gauge the quality of our data and remove parts that aren't good enough to use.

-   P-value detection through `detP` function. 

-   Plot the mean

-   QcReport function in `minfi`

```{r}
# Calculate the detection p-values
detP <- detectionP(rgSet)
head(detP)
```

```{r}
# Examine mean detection p-values across all samples to identify any failed samples
pal <- brewer.pal(8,"Dark2")
par(mfrow=c(1,2))
barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2, 
        cex.names=0.8, ylab="Mean detection p-values")
abline(h=0.05,col="red")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal,
       bg="white")

barplot(colMeans(detP), col=pal[factor(targets$Sample_Group)], las=2, 
        cex.names=0.8, ylim=c(0,0.002), ylab="Mean detection p-values")
abline(h=0.05,col="red")
legend("topleft", legend=levels(factor(targets$Sample_Group)), fill=pal, 
       bg="white")
```

```{r}
#| echo: false
#| message: false

# Generate QC Report
qcReport(rgSet, sampNames=targets$ID, sampGroups=targets$Sample_Group, 
         pdf="qcReport.pdf")
```

```{r}
# Remove poor quality samples
keep <- colMeans(detP) < 0.05
rgSet <- rgSet[,keep]
rgSet
```

```{r}
# Remove poor quality samples from targets data
targets <- targets[keep,]
targets[,1:5]
```

```{r}
# Remove poor quality samples from detection p-value table
detP <- detP[,keep]
dim(detP)
```

## 2.4 Normalization

Another process of data treatment to help eliminate unwanted variability between samples.

-   Dealing with variation within data

-   Many different methods even within just `minfi`

-   `preprocessFunnorm` for global methylation differences

-   Quantile is more suited samples with no global differences

```{r}
# Normalize the data; this results in a GenomicRatioSet object
mSetSq <- preprocessQuantile(rgSet) 
```

```{r}
# Create a MethylSet object from the raw data for plotting
mSetRaw <- preprocessRaw(rgSet)
```

```{r}
# Visualise what the data looks like before and after normalization
par(mfrow=c(1,2))
densityPlot(rgSet, sampGroups=targets$Sample_Group,main="Raw", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)), 
       text.col=brewer.pal(8,"Dark2"))
densityPlot(getBeta(mSetSq), sampGroups=targets$Sample_Group,
            main="Normalized", legend=FALSE)
legend("top", legend = levels(factor(targets$Sample_Group)), 
       text.col=brewer.pal(8,"Dark2"))
```

## 2.5 Data Exploration

Visualizing data is a key component of data exploration and can make it easier to understand results. In this workflow, we used multi-dimensional scaling plots (MDS). MDS plots are based on principal components analysis (PCA) and look at the similarities and differences between the various samples. Samples that are more like each other should cluster together, and samples that are different should be further apart on the plot.

Note: PCA is a data reduction method that reduces the number of variables that account for the variance in the data and makes it easier to interpret large datasets.

To plot this we used the `plotMDS` function, a built-in function in R to handle this kind of data. It appears like ggplot2 with the ability to alter specific aspects of the plot.

```{r}
# MDS plots to look at largest sources of variation
par(mfrow=c(1,2))
plotMDS(getM(mSetSq), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Group)])
legend("top", legend=levels(factor(targets$Sample_Group)), text.col=pal,
       bg="white", cex=0.7)

plotMDS(getM(mSetSq), top=1000, gene.selection="common",  
        col=pal[factor(targets$Sample_Source)])
legend("top", legend=levels(factor(targets$Sample_Source)), text.col=pal,
       bg="white", cex=0.7)
```

```{r}
# Examine higher dimensions to look at other sources of variation
par(mfrow=c(1,3))
plotMDS(getM(mSetSq), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Group)], dim=c(1,3))
legend("top", legend=levels(factor(targets$Sample_Group)), text.col=pal, 
       cex=0.7, bg="white")

plotMDS(getM(mSetSq), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Group)], dim=c(2,3))
legend("topleft", legend=levels(factor(targets$Sample_Group)), text.col=pal,
       cex=0.7, bg="white")

plotMDS(getM(mSetSq), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Group)], dim=c(3,4))
legend("topright", legend=levels(factor(targets$Sample_Group)), text.col=pal,
       cex=0.7, bg="white")
```

## 2.6 Filtering

Like what we did with Trimmomatic when working with databases, this step requires that we filter out DNA probes that interfere with our analysis. This is because the signal from these probes is unreliable and removing allows us to perform fewer statistical tests.

In this step, we begin by ordering the probes, then removing any probes that have failed in one or more samples.

While this dataset is entirely composed of male donors, filtering probes from both X and Y chromosomes can be done.

Similarly, single nucleotide polymorphisms (SNPs) - the most common type of genetic variation among people -- can also be filtered out of probes using the function `minifi`.

After filtering we can re-examined the data using MDS plots to see if the relationship between samples changed. In this workflow, you can see that removing the SNP-affected CpGs probes from the data changes the sample clustering in the MDS plots.

We then calculated the M-values, a measure of the number of molecules that are methylated or unmethylated and the beta value which roughly represents the percentage of a site that is methylated (Du et al, 2010).

```{r}
# Ensure probes are in the same order in the mSetSq and detP objects
detP <- detP[match(featureNames(mSetSq),rownames(detP)),] 

# Remove any probes that have failed in one or more samples
keep <- rowSums(detP < 0.01) == ncol(mSetSq) 
table(keep)

mSetSqFlt <- mSetSq[keep,]
mSetSqFlt
```

```{r}
# If your data includes males and females, remove probes on the sex chromosomes
keep <- !(featureNames(mSetSqFlt) %in% ann450k$Name[ann450k$chr %in% 
                                                        c("chrX","chrY")])
table(keep)
mSetSqFlt <- mSetSqFlt[keep,]
```

```{r}
# Remove probes with SNPs at CpG site
mSetSqFlt <- dropLociWithSnps(mSetSqFlt)
mSetSqFlt
```

```{r}
# Exclude cross reactive probes 
xReactiveProbes <- read.csv(file=paste(dataDirectory,
                                       "48639-non-specific-probes-Illumina450k.csv",
                                       sep="/"), stringsAsFactors=FALSE)
keep <- !(featureNames(mSetSqFlt) %in% xReactiveProbes$TargetID)
table(keep)

mSetSqFlt <- mSetSqFlt[keep,] 
mSetSqFlt
```

```{r}
par(mfrow=c(1,2))
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Group)], cex=0.8)
legend("right", legend=levels(factor(targets$Sample_Group)), text.col=pal,
       cex=0.65, bg="white")

plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Source)])
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
       cex=0.7, bg="white")
```

```{r}
par(mfrow=c(1,3))
# Examine higher dimensions to look at other sources of variation
plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Source)], dim=c(1,3))
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
       cex=0.7, bg="white")

plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Source)], dim=c(2,3))
legend("topright", legend=levels(factor(targets$Sample_Source)), text.col=pal,
       cex=0.7, bg="white")

plotMDS(getM(mSetSqFlt), top=1000, gene.selection="common", 
        col=pal[factor(targets$Sample_Source)], dim=c(3,4))
legend("right", legend=levels(factor(targets$Sample_Source)), text.col=pal,
       cex=0.7, bg="white")
```

```{r}
# Calculate M-values for statistical analysis
mVals <- getM(mSetSqFlt)
head(mVals[,1:5])

bVals <- getBeta(mSetSqFlt)
head(bVals[,1:5])
```

```{r}
par(mfrow=c(1,2))
densityPlot(bVals, sampGroups=targets$Sample_Group, main="Beta values", 
            legend=FALSE, xlab="Beta values")
legend("top", legend = levels(factor(targets$Sample_Group)), 
       text.col=brewer.pal(8,"Dark2"))
densityPlot(mVals, sampGroups=targets$Sample_Group, main="M-values", 
            legend=FALSE, xlab="M values")
legend("topleft", legend = levels(factor(targets$Sample_Group)), 
       text.col=brewer.pal(8,"Dark2"))
```

## 2.7 Probe-Wise Differential Methylation Analysis

The focus of this dataset is discovering differentially methylated probes between different cell types. This style of analysis is called a paired analysis; differences between cell types are calculated within each individual, and then these differences are averaged across individuals to determine whether there is an overall significant difference in the mean methylation level for each CpG site.

We were interested in pairwise comparisons between the four cell types. In this workflow, we analyzed the M-values in limma. This allowed us to obtain moderated t-statistics and associated p-values for each CpG site, sites where a cytosine is followed by guanine.

Based on a false discovery rate of 5%, we found 3021 significantly differentially methylated CpGs in the naïve vs rTreg comparison. The rTreg/ act_rTreg did not show any significant differential methylation.

```{r}
# This is the factor of interest
cellType <- factor(targets$Sample_Group)
# This is the individual effect that we need to account for
individual <- factor(targets$Sample_Source) 

# Use the above to create a design matrix
design <- model.matrix(~0+cellType+individual, data=targets)
colnames(design) <- c(levels(cellType),levels(individual)[-1])
 
# Fit the linear model 
fit <- lmFit(mVals, design)
# create a contrast matrix for specific comparisons
contMatrix <- makeContrasts(naive-rTreg,
                           naive-act_naive,
                           rTreg-act_rTreg,
                           act_naive-act_rTreg,
                           levels=design)
contMatrix
```

```{r}
# fit the contrasts
fit2 <- contrasts.fit(fit, contMatrix)
fit2 <- eBayes(fit2)

# look at the numbers of DM CpGs at FDR < 0.05
summary(decideTests(fit2))
```

```{r}
# Get the table of results for the first contrast (naive - rTreg)
ann450kSub <- ann450k[match(rownames(mVals),ann450k$Name),
                      c(1:4,12:19,24:ncol(ann450k))]
DMPs <- topTable(fit2, num=Inf, coef=1, genelist=ann450kSub)
head(DMPs)

write.table(DMPs, file="DMPs.csv", sep=",", row.names=FALSE)
```

```{r}
# Plot the top 4 most significantly differentially methylated CpGs 
par(mfrow=c(2,2))
sapply(rownames(DMPs)[1:4], function(cpg){
  plotCpg(bVals, cpg=cpg, pheno=targets$Sample_Group, ylab = "Beta values")
})
```

## 2.8 Differential Methylation Analysis of Regions

Our probe-wise differential methylation analysis can be valuable, but it is not alone sufficient if we want to look at entire regions. Several Bioconductor packages exist that can help obtain a broader overview of differential methylated regions (DMRs). This workflow utilizes the `dmrcate` Bioconductor package. The final figure maps the methylated regions against chromosome length and the known genes.

```{r}
myAnnotation <- cpg.annotate(object = mVals, datatype = "array", what = "M", 
                             analysis.type = "differential", design = design, 
                             contrasts = TRUE, cont.matrix = contMatrix, 
                             coef = "naive - rTreg", arraytype = "450K")

str(myAnnotation)
```

```{r}
#endif /* NEWSTUFF */
DMRs <- dmrcate(myAnnotation, lambda=1000, C=2)
results.ranges <- extractRanges(DMRs)
results.ranges
```

```{r}
# Set up the grouping variables and colous
groups <- pal[1:length(unique(targets$Sample_Group))]
names(groups) <- levels(factor(targets$Sample_Group))
cols <- groups[as.character(factor(targets$Sample_Group))]
```

```{r}
# Draw the plot for the top DMR
par(mfrow=c(1,1))
DMR.plot(ranges = results.ranges, dmr = 2, CpGs = bVals, phen.col = cols, 
         what = "Beta", arraytype = "450K", genome = "hg19")
```

## 2.9 Customising Visualisations of Methylation Data

The `Gviz` package utilized by this workflow allows the customization of data visualization plots with a variety of different functions. Here we focus on the DMR identified in our previous graph, while also more clearly presenting the methylation data. There are other types of analysis that could be done with this workflow, but this covers the main functions.

```{r}
# indicate which genome is being used
gen <- "hg19"
# the index of the DMR that we will plot 
dmrIndex <- 1
# extract chromosome number and location from DMR results 
chrom <- as.character(seqnames(results.ranges[dmrIndex]))
start <- as.numeric(start(results.ranges[dmrIndex]))
end <- as.numeric(end(results.ranges[dmrIndex]))
# add 25% extra space to plot
minbase <- start - (0.25*(end-start))
maxbase <- end + (0.25*(end-start))
```

```{r}
# CpG islands
islandHMM <- read.csv(paste0(dataDirectory,
                             "/model-based-cpg-islands-hg19-chr17.txt"),
                      sep="\t", stringsAsFactors=FALSE, header=FALSE)
head(islandHMM)
```

```{r}
islandData <- GRanges(seqnames=Rle(islandHMM[,1]), 
                      ranges=IRanges(start=islandHMM[,2], end=islandHMM[,3]),
                      strand=Rle(strand(rep("*",nrow(islandHMM)))))
islandData
```

```{r}
# DNAseI hypersensitive sites
dnase <- read.csv(paste0(dataDirectory,"/wgEncodeRegDnaseClusteredV3chr17.bed"),
                  sep="\t",stringsAsFactors=FALSE,header=FALSE)
head(dnase)
```

```{r}
dnaseData <- GRanges(seqnames=dnase[,1],
                     ranges=IRanges(start=dnase[,2], end=dnase[,3]),
                     strand=Rle(rep("*",nrow(dnase))),
                     data=dnase[,5])
dnaseData
```

```{r}
iTrack <- IdeogramTrack(genome = gen, chromosome = chrom, name="")
gTrack <- GenomeAxisTrack(col="black", cex=1, name="", fontcolor="black")
rTrack <- UcscTrack(genome=gen, chromosome=chrom, track="NCBI RefSeq", 
                    from=minbase, to=maxbase, trackType="GeneRegionTrack", 
                    rstarts="exonStarts", rends="exonEnds", gene="name", 
                    symbol="name2", transcript="name", strand="strand", 
                    fill="darkblue",stacking="squish", name="RefSeq", 
                    showId=TRUE, geneSymbol=TRUE)
```

```{r}
ann450kOrd <- ann450kSub[order(ann450kSub$chr,ann450kSub$pos),]
head(ann450kOrd)
```

```{r}
bValsOrd <- bVals[match(ann450kOrd$Name,rownames(bVals)),]
head(bValsOrd)
```

```{r}
# create genomic ranges object from methylation data
cpgData <- GRanges(seqnames=Rle(ann450kOrd$chr),
                   ranges=IRanges(start=ann450kOrd$pos, end=ann450kOrd$pos),
                   strand=Rle(rep("*",nrow(ann450kOrd))),
                   betas=bValsOrd)
# extract data on CpGs in DMR
cpgData <- subsetByOverlaps(cpgData, results.ranges[dmrIndex])

# methylation data track
methTrack <- DataTrack(range=cpgData, groups=targets$Sample_Group,genome = gen,
                       chromosome=chrom, ylim=c(-0.05,1.05), col=pal,
                       type=c("a","p"), name="DNA Meth.\n(beta value)",
                       background.panel="white", legend=TRUE, cex.title=0.8,
                       cex.axis=0.8, cex.legend=0.8)
# CpG island track
islandTrack <- AnnotationTrack(range=islandData, genome=gen, name="CpG Is.", 
                               chromosome=chrom,fill="darkgreen")

# DNaseI hypersensitive site data track
dnaseTrack <- DataTrack(range=dnaseData, genome=gen, name="DNAseI", 
                        type="gradient", chromosome=chrom)

# DMR position data track
dmrTrack <- AnnotationTrack(start=start, end=end, genome=gen, name="DMR", 
                            chromosome=chrom,fill="darkred")
```

```{r}
tracks <- list(iTrack, gTrack, methTrack, dmrTrack, islandTrack, dnaseTrack,
               rTrack)
sizes <- c(2,2,5,2,2,2,3) # set up the relative sizes of the tracks
plotTracks(tracks, from=minbase, to=maxbase, showTitle=TRUE, add53=TRUE, 
           add35=TRUE, grid=TRUE, lty.grid=3, sizes = sizes, length(tracks))
```

## 3.1 Conclusions

**Things Learned**

-   How to navigate the Bioconductor website

-   Using Bioconductor for supplemental research

-   R has many packages to handle a wide variety of biological data

-   How to use Bioconductor to learn how to approach different data problems

-   Methylation is complicated

**Challenges**

-   Undoing commits with GitKraken

-   Updating R and not just RStudio

-   Getting the document to render
